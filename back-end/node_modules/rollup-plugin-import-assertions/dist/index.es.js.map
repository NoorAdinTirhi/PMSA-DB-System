{"version":3,"file":"index.es.js","sources":["../src/convert.js","../src/index.js"],"sourcesContent":["// This is originally from https://www.npmjs.com/package/string-to-template-literal\n// however this package does not expose cjs modules, which is needed by this plugin\n// for testing.\n\nconst illegalChars = new Map();\nillegalChars.set('\\\\', '\\\\\\\\');\nillegalChars.set('`', '\\\\`');\nillegalChars.set('$', '\\\\$');\n\nexport default function convert(s) {\n  if (!s) {\n    return '``';\n  }\n\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charAt(i);\n    res += illegalChars.get(c) || c;\n  }\n  return `\\`${res}\\``;\n}\n","/**\n * copyright 2022 swiing\n * SPDX-License-Identifier: MIT\n */\n\nimport { importAssertions as acornImportAssertions } from 'acorn-import-assertions';\nimport { createFilter, dataToEsm } from '@rollup/pluginutils';\nimport { walk } from 'estree-walker';\n\nimport convert from './convert';\n\n// Implementation principle:\n//\n// When a module is processed, we look for import assertions;\n// for each one found, we attach adhoc information to the corresponding module.\n// When a module is transformed, we check for such adhoc information;\n// if present, we transform accordingly.\n//\n// In rollup v2, adhoc information is set/found in `meta: { 'import-assertions': <type> }`\n// In rollup v3, there is some support of import assertions, so we leverage this.\n// In that case, adhoc information is set/found in `assertions : { type: <type> }`\n//\n// Supported meta information is \"json\" and \"css\".\n\n// options are same as for @rollup/plugin-json\n// see https://github.com/rollup/plugins/tree/master/packages/json\nexport default function importAssertions(options = {}) {\n  const filter = createFilter(options.include, options.exclude);\n  const indent = 'indent' in options ? options.indent : '\\t';\n  const treatAsExternal = [];\n\n  return {\n    name: 'import-assertions',\n\n    // we want to make sure acorn knows how to parse import assertions\n\n    // The acorn parser only implements stage 4 js proposals.\n    // At the moment \"import assertions\" are a stage 3 proposal and as such\n    // cannot be parsed by acorn. However, there exist a plugin,\n    // so we inject the adhoc plugin into the options\n    // by leveraging https://rollupjs.org/guide/en/#acorninjectplugins\n    options(opts) {\n      // eslint-disable-next-line no-param-reassign\n      opts.acornInjectPlugins = opts.acornInjectPlugins || [];\n      if (!opts.acornInjectPlugins.includes(acornImportAssertions)) {\n        opts.acornInjectPlugins.push(acornImportAssertions);\n      }\n      return opts;\n    },\n\n    resolveId(source, importer) {\n      if (importer in treatAsExternal && treatAsExternal[importer].has(source)) {\n        this.warn(`treating ${source} as an external dependency`);\n        return false;\n      }\n      return null;\n    },\n\n    async transform(inputCode, id) {\n      if (!filter(id)) return null;\n\n      const self = this;\n\n      const moduleInfo = self.getModuleInfo(id);\n      const assertType =\n        'assertions' in moduleInfo\n          // eslint-disable-next-line line-comment-position\n          ? // rollup v3\n            moduleInfo.assertions.type\n          : moduleInfo.meta['import-assertions'];\n\n      if (assertType === 'json')\n        // from @rollup/plugin-json\n        try {\n          const parsed = JSON.parse(inputCode);\n          const code = dataToEsm(parsed, {\n            preferConst: options.preferConst,\n            compact: options.compact,\n            namedExports: options.namedExports,\n            indent\n          });\n          return {\n            code,\n            map: { mappings: '' }\n          };\n        } catch (err) {\n          const message = 'Could not parse JSON file';\n          const position = parseInt(/[\\d]/.exec(err.message)[0], 10);\n          this.warn({ message, id, position });\n          return null;\n        }\n      else if (assertType === 'css') {\n        const code = `let sheet;\ntry {\n  sheet = new CSSStyleSheet()\n  sheet.replaceSync(${convert(inputCode)});\n} catch(err) {\n  console.error('Constructable Stylesheets are not supported in your environment. Please consider a polyfill, e.g. https://www.npmjs.com/package/construct-style-sheets-polyfill')\n}\nexport default sheet;`;\n        return {\n          code,\n          map: { mappings: '' }\n        };\n      }\n\n      // else assume some sort of js\n      const declarations = [];\n      let ast;\n      try {\n        ast = this.parse(inputCode);\n        walk(ast, {\n          enter(node) {\n            if (\n              ['ImportDeclaration', 'ExportNamedDeclaration'].includes(node.type) &&\n              node.assertions\n            ) {\n              // As per https://github.com/xtuc/acorn-import-assertions/blob/main/src/index.js#L167\n              // an import assertions node has (amongst others):\n              // - a source node, whose value is the path\n              const sourceNode = node.source;\n              // - an (array of) assertions node, whose value is a Literal node, whose value is the type (i.e. \"json\"|\"css\")\n              const literalNode = node.assertions[0].value;\n              declarations.push({ source: sourceNode.value, type: literalNode.value });\n            }\n          }\n        });\n      } catch (err) {\n        return null;\n      }\n\n      // attach meta information to the module\n      // Note: it is important to await here: this makes sure rollup does not process imports\n      // before the meta info is attached to the modules (by means of rollup waiting\n      // the transform() hook to resolve before processing imports)\n      // https://rollupjs.org/guide/en/#build-hooks\n      await Promise.all(\n        declarations.map(async ({ source, type }) => {\n          // { assertions } is used by rollup v3 (ignored by rollup v2)\n          const resolvedId = await self.resolve(source, id, { assertions: { type } });\n\n          if (!resolvedId) {\n            this.warn('Unresolved dependencies');\n            if (!(id in treatAsExternal)) treatAsExternal[id] = new Set();\n            treatAsExternal[id].add(source);\n            return;\n          }\n          if (resolvedId.external) return;\n\n          const meta = { 'import-assertions': type };\n          const moduleInfo = this.getModuleInfo(resolvedId.id);\n          // case where the module has not been loaded yet.\n          if (!moduleInfo) {\n            self\n              .load({ ...resolvedId, meta })\n              // errors parsing the file are already captured, so don't repeat error\n              // https://github.com/rollup/rollup/blob/275dc2fa34e1aaad37a29360570dc85b1ba019a6/src/Module.ts#L837\n              // Question: could it be though that load() rejects for an error type\n              // other than parsing?\n              .catch(() => {});\n          }\n          // case where the module has already been loaded (e.g. by another plugin)\n          else {\n            moduleInfo.meta = { ...moduleInfo.meta, ...meta };\n          }\n        })\n      );\n\n      return null;\n    }\n  };\n}\n"],"names":["acornImportAssertions"],"mappings":"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"}